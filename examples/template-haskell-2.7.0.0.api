----------------------------------------
module Language.Haskell.TH

infixl 9 Language.Haskell.TH.Lib.appE
Language.Haskell.TH.Lib.appE ::
  Language.Haskell.TH.Lib.ExpQ ->
  Language.Haskell.TH.Lib.ExpQ ->
  Language.Haskell.TH.Lib.ExpQ

infixl 9 Language.Haskell.TH.Lib.appT
Language.Haskell.TH.Lib.appT ::
  Language.Haskell.TH.Lib.TypeQ ->
  Language.Haskell.TH.Lib.TypeQ ->
  Language.Haskell.TH.Lib.TypeQ

infixl 9 Language.Haskell.TH.Lib.appsE
Language.Haskell.TH.Lib.appsE ::
  [Language.Haskell.TH.Lib.ExpQ] ->
  Language.Haskell.TH.Lib.ExpQ

infixl 9 Language.Haskell.TH.Lib.arithSeqE
Language.Haskell.TH.Lib.arithSeqE ::
  Language.Haskell.TH.Lib.RangeQ ->
  Language.Haskell.TH.Lib.ExpQ

infixl 9 Language.Haskell.TH.Lib.arrowT
Language.Haskell.TH.Lib.arrowT ::
  Language.Haskell.TH.Lib.TypeQ

infixl 9 Language.Haskell.TH.Lib.asP
Language.Haskell.TH.Lib.asP ::
  Language.Haskell.TH.Syntax.Name ->
  Language.Haskell.TH.Lib.PatQ ->
  Language.Haskell.TH.Lib.PatQ

infixl 9 Language.Haskell.TH.Lib.bangP
Language.Haskell.TH.Lib.bangP ::
  Language.Haskell.TH.Lib.PatQ ->
  Language.Haskell.TH.Lib.PatQ

infixl 9 Language.Haskell.TH.Lib.bindS
Language.Haskell.TH.Lib.bindS ::
  Language.Haskell.TH.Lib.PatQ ->
  Language.Haskell.TH.Lib.ExpQ ->
  Language.Haskell.TH.Lib.StmtQ

infixl 9 Language.Haskell.TH.Lib.cCall
Language.Haskell.TH.Lib.cCall ::
  Language.Haskell.TH.Syntax.Callconv

infixl 9 Language.Haskell.TH.Lib.caseE
Language.Haskell.TH.Lib.caseE ::
  Language.Haskell.TH.Lib.ExpQ ->
  [Language.Haskell.TH.Lib.MatchQ] ->
  Language.Haskell.TH.Lib.ExpQ

infixl 9 Language.Haskell.TH.Lib.charL
Language.Haskell.TH.Lib.charL ::
  GHC.Types.Char ->
  Language.Haskell.TH.Syntax.Lit

infixl 9 Language.Haskell.TH.Lib.classD
Language.Haskell.TH.Lib.classD ::
  Language.Haskell.TH.Lib.CxtQ ->
  Language.Haskell.TH.Syntax.Name ->
  [Language.Haskell.TH.Syntax.TyVarBndr] ->
  [Language.Haskell.TH.Syntax.FunDep] ->
  [Language.Haskell.TH.Lib.DecQ] ->
  Language.Haskell.TH.Lib.DecQ

infixl 9 Language.Haskell.TH.Lib.classP
Language.Haskell.TH.Lib.classP ::
  Language.Haskell.TH.Syntax.Name ->
  [Language.Haskell.TH.Lib.TypeQ] ->
  Language.Haskell.TH.Lib.PredQ

infixl 9 Language.Haskell.TH.Lib.clause
Language.Haskell.TH.Lib.clause ::
  [Language.Haskell.TH.Lib.PatQ] ->
  Language.Haskell.TH.Lib.BodyQ ->
  [Language.Haskell.TH.Lib.DecQ] ->
  Language.Haskell.TH.Lib.ClauseQ

infixl 9 Language.Haskell.TH.Lib.compE
Language.Haskell.TH.Lib.compE ::
  [Language.Haskell.TH.Lib.StmtQ] ->
  Language.Haskell.TH.Lib.ExpQ

infixl 9 Language.Haskell.TH.Lib.conE
Language.Haskell.TH.Lib.conE ::
  Language.Haskell.TH.Syntax.Name ->
  Language.Haskell.TH.Lib.ExpQ

infixl 9 Language.Haskell.TH.Lib.conP
Language.Haskell.TH.Lib.conP ::
  Language.Haskell.TH.Syntax.Name ->
  [Language.Haskell.TH.Lib.PatQ] ->
  Language.Haskell.TH.Lib.PatQ

infixl 9 Language.Haskell.TH.Lib.conT
Language.Haskell.TH.Lib.conT ::
  Language.Haskell.TH.Syntax.Name ->
  Language.Haskell.TH.Lib.TypeQ

infixl 9 Language.Haskell.TH.Lib.condE
Language.Haskell.TH.Lib.condE ::
  Language.Haskell.TH.Lib.ExpQ ->
  Language.Haskell.TH.Lib.ExpQ ->
  Language.Haskell.TH.Lib.ExpQ ->
  Language.Haskell.TH.Lib.ExpQ

infixl 9 Language.Haskell.TH.Lib.cxt
Language.Haskell.TH.Lib.cxt ::
  [Language.Haskell.TH.Lib.PredQ] ->
  Language.Haskell.TH.Lib.CxtQ

infixl 9 Language.Haskell.TH.Lib.dataD
Language.Haskell.TH.Lib.dataD ::
  Language.Haskell.TH.Lib.CxtQ ->
  Language.Haskell.TH.Syntax.Name ->
  [Language.Haskell.TH.Syntax.TyVarBndr] ->
  [Language.Haskell.TH.Lib.ConQ] ->
  [Language.Haskell.TH.Syntax.Name] ->
  Language.Haskell.TH.Lib.DecQ

infixl 9 Language.Haskell.TH.Lib.dataFam
Language.Haskell.TH.Lib.dataFam ::
  Language.Haskell.TH.Syntax.FamFlavour

infixl 9 Language.Haskell.TH.Lib.dataInstD
Language.Haskell.TH.Lib.dataInstD ::
  Language.Haskell.TH.Lib.CxtQ ->
  Language.Haskell.TH.Syntax.Name ->
  [Language.Haskell.TH.Lib.TypeQ] ->
  [Language.Haskell.TH.Lib.ConQ] ->
  [Language.Haskell.TH.Syntax.Name] ->
  Language.Haskell.TH.Lib.DecQ

infixl 9 Language.Haskell.TH.Lib.doE
Language.Haskell.TH.Lib.doE ::
  [Language.Haskell.TH.Lib.StmtQ] ->
  Language.Haskell.TH.Lib.ExpQ

infixl 9 Language.Haskell.TH.Lib.doublePrimL
Language.Haskell.TH.Lib.doublePrimL ::
  GHC.Real.Rational ->
  Language.Haskell.TH.Syntax.Lit

infixl 9 Language.Haskell.TH.Lib.dyn
Language.Haskell.TH.Lib.dyn ::
  GHC.Base.String ->
  Language.Haskell.TH.Syntax.Q Language.Haskell.TH.Syntax.Exp

infixl 9 Language.Haskell.TH.Lib.equalP
Language.Haskell.TH.Lib.equalP ::
  Language.Haskell.TH.Lib.TypeQ ->
  Language.Haskell.TH.Lib.TypeQ ->
  Language.Haskell.TH.Lib.PredQ

infixl 9 Language.Haskell.TH.Lib.familyKindD
Language.Haskell.TH.Lib.familyKindD ::
  Language.Haskell.TH.Syntax.FamFlavour ->
  Language.Haskell.TH.Syntax.Name ->
  [Language.Haskell.TH.Syntax.TyVarBndr] ->
  Language.Haskell.TH.Syntax.Kind ->
  Language.Haskell.TH.Lib.DecQ

infixl 9 Language.Haskell.TH.Lib.familyNoKindD
Language.Haskell.TH.Lib.familyNoKindD ::
  Language.Haskell.TH.Syntax.FamFlavour ->
  Language.Haskell.TH.Syntax.Name ->
  [Language.Haskell.TH.Syntax.TyVarBndr] ->
  Language.Haskell.TH.Lib.DecQ

infixl 9 Language.Haskell.TH.Lib.fieldExp
Language.Haskell.TH.Lib.fieldExp ::
  Language.Haskell.TH.Syntax.Name ->
  Language.Haskell.TH.Lib.ExpQ ->
  Language.Haskell.TH.Syntax.Q (Language.Haskell.TH.Syntax.Name, Language.Haskell.TH.Syntax.Exp)

infixl 9 Language.Haskell.TH.Lib.fieldPat
Language.Haskell.TH.Lib.fieldPat ::
  Language.Haskell.TH.Syntax.Name ->
  Language.Haskell.TH.Lib.PatQ ->
  Language.Haskell.TH.Lib.FieldPatQ

infixl 9 Language.Haskell.TH.Lib.floatPrimL
Language.Haskell.TH.Lib.floatPrimL ::
  GHC.Real.Rational ->
  Language.Haskell.TH.Syntax.Lit

infixl 9 Language.Haskell.TH.Lib.forImpD
Language.Haskell.TH.Lib.forImpD ::
  Language.Haskell.TH.Syntax.Callconv ->
  Language.Haskell.TH.Syntax.Safety ->
  GHC.Base.String ->
  Language.Haskell.TH.Syntax.Name ->
  Language.Haskell.TH.Lib.TypeQ ->
  Language.Haskell.TH.Lib.DecQ

infixl 9 Language.Haskell.TH.Lib.forallT
Language.Haskell.TH.Lib.forallT ::
  [Language.Haskell.TH.Syntax.TyVarBndr] ->
  Language.Haskell.TH.Lib.CxtQ ->
  Language.Haskell.TH.Lib.TypeQ ->
  Language.Haskell.TH.Lib.TypeQ

infixl 9 Language.Haskell.TH.Lib.fromE
Language.Haskell.TH.Lib.fromE ::
  Language.Haskell.TH.Lib.ExpQ ->
  Language.Haskell.TH.Lib.ExpQ

infixl 9 Language.Haskell.TH.Lib.fromR
Language.Haskell.TH.Lib.fromR ::
  Language.Haskell.TH.Lib.ExpQ ->
  Language.Haskell.TH.Lib.RangeQ

infixl 9 Language.Haskell.TH.Lib.fromThenE
Language.Haskell.TH.Lib.fromThenE ::
  Language.Haskell.TH.Lib.ExpQ ->
  Language.Haskell.TH.Lib.ExpQ ->
  Language.Haskell.TH.Lib.ExpQ

infixl 9 Language.Haskell.TH.Lib.fromThenR
Language.Haskell.TH.Lib.fromThenR ::
  Language.Haskell.TH.Lib.ExpQ ->
  Language.Haskell.TH.Lib.ExpQ ->
  Language.Haskell.TH.Lib.RangeQ

infixl 9 Language.Haskell.TH.Lib.fromThenToE
Language.Haskell.TH.Lib.fromThenToE ::
  Language.Haskell.TH.Lib.ExpQ ->
  Language.Haskell.TH.Lib.ExpQ ->
  Language.Haskell.TH.Lib.ExpQ ->
  Language.Haskell.TH.Lib.ExpQ

infixl 9 Language.Haskell.TH.Lib.fromThenToR
Language.Haskell.TH.Lib.fromThenToR ::
  Language.Haskell.TH.Lib.ExpQ ->
  Language.Haskell.TH.Lib.ExpQ ->
  Language.Haskell.TH.Lib.ExpQ ->
  Language.Haskell.TH.Lib.RangeQ

infixl 9 Language.Haskell.TH.Lib.fromToE
Language.Haskell.TH.Lib.fromToE ::
  Language.Haskell.TH.Lib.ExpQ ->
  Language.Haskell.TH.Lib.ExpQ ->
  Language.Haskell.TH.Lib.ExpQ

infixl 9 Language.Haskell.TH.Lib.fromToR
Language.Haskell.TH.Lib.fromToR ::
  Language.Haskell.TH.Lib.ExpQ ->
  Language.Haskell.TH.Lib.ExpQ ->
  Language.Haskell.TH.Lib.RangeQ

infixl 9 Language.Haskell.TH.Lib.funD
Language.Haskell.TH.Lib.funD ::
  Language.Haskell.TH.Syntax.Name ->
  [Language.Haskell.TH.Lib.ClauseQ] ->
  Language.Haskell.TH.Lib.DecQ

infixl 9 Language.Haskell.TH.Lib.global
Language.Haskell.TH.Lib.global ::
  Language.Haskell.TH.Syntax.Name ->
  Language.Haskell.TH.Lib.ExpQ

infixl 9 Language.Haskell.TH.Lib.guardedB
Language.Haskell.TH.Lib.guardedB ::
  [Language.Haskell.TH.Syntax.Q (Language.Haskell.TH.Syntax.Guard, Language.Haskell.TH.Syntax.Exp)] ->
  Language.Haskell.TH.Lib.BodyQ

infixl 9 Language.Haskell.TH.Lib.infixApp
Language.Haskell.TH.Lib.infixApp ::
  Language.Haskell.TH.Lib.ExpQ ->
  Language.Haskell.TH.Lib.ExpQ ->
  Language.Haskell.TH.Lib.ExpQ ->
  Language.Haskell.TH.Lib.ExpQ

infixl 9 Language.Haskell.TH.Lib.infixC
Language.Haskell.TH.Lib.infixC ::
  Language.Haskell.TH.Syntax.Q (Language.Haskell.TH.Syntax.Strict, Language.Haskell.TH.Syntax.Type) ->
  Language.Haskell.TH.Syntax.Name ->
  Language.Haskell.TH.Syntax.Q (Language.Haskell.TH.Syntax.Strict, Language.Haskell.TH.Syntax.Type) ->
  Language.Haskell.TH.Lib.ConQ

infixl 9 Language.Haskell.TH.Lib.infixE
Language.Haskell.TH.Lib.infixE ::
  Data.Maybe.Maybe Language.Haskell.TH.Lib.ExpQ ->
  Language.Haskell.TH.Lib.ExpQ ->
  Data.Maybe.Maybe Language.Haskell.TH.Lib.ExpQ ->
  Language.Haskell.TH.Lib.ExpQ

infixl 9 Language.Haskell.TH.Lib.infixP
Language.Haskell.TH.Lib.infixP ::
  Language.Haskell.TH.Lib.PatQ ->
  Language.Haskell.TH.Syntax.Name ->
  Language.Haskell.TH.Lib.PatQ ->
  Language.Haskell.TH.Lib.PatQ

infixl 9 Language.Haskell.TH.Lib.inlineSpecNoPhase
Language.Haskell.TH.Lib.inlineSpecNoPhase ::
  GHC.Types.Bool ->
  GHC.Types.Bool ->
  Language.Haskell.TH.Lib.InlineSpecQ

infixl 9 Language.Haskell.TH.Lib.inlineSpecPhase
Language.Haskell.TH.Lib.inlineSpecPhase ::
  GHC.Types.Bool ->
  GHC.Types.Bool ->
  GHC.Types.Bool ->
  GHC.Types.Int ->
  Language.Haskell.TH.Lib.InlineSpecQ

infixl 9 Language.Haskell.TH.Lib.instanceD
Language.Haskell.TH.Lib.instanceD ::
  Language.Haskell.TH.Lib.CxtQ ->
  Language.Haskell.TH.Lib.TypeQ ->
  [Language.Haskell.TH.Lib.DecQ] ->
  Language.Haskell.TH.Lib.DecQ

infixl 9 Language.Haskell.TH.Lib.intPrimL
Language.Haskell.TH.Lib.intPrimL ::
  GHC.Integer.Type.Integer ->
  Language.Haskell.TH.Syntax.Lit

infixl 9 Language.Haskell.TH.Lib.integerL
Language.Haskell.TH.Lib.integerL ::
  GHC.Integer.Type.Integer ->
  Language.Haskell.TH.Syntax.Lit

infixl 9 Language.Haskell.TH.Lib.isStrict
Language.Haskell.TH.Lib.isStrict ::
  Language.Haskell.TH.Syntax.Q Language.Haskell.TH.Syntax.Strict

infixl 9 Language.Haskell.TH.Lib.lam1E
Language.Haskell.TH.Lib.lam1E ::
  Language.Haskell.TH.Lib.PatQ ->
  Language.Haskell.TH.Lib.ExpQ ->
  Language.Haskell.TH.Lib.ExpQ

infixl 9 Language.Haskell.TH.Lib.lamE
Language.Haskell.TH.Lib.lamE ::
  [Language.Haskell.TH.Lib.PatQ] ->
  Language.Haskell.TH.Lib.ExpQ ->
  Language.Haskell.TH.Lib.ExpQ

infixl 9 Language.Haskell.TH.Lib.letE
Language.Haskell.TH.Lib.letE ::
  [Language.Haskell.TH.Lib.DecQ] ->
  Language.Haskell.TH.Lib.ExpQ ->
  Language.Haskell.TH.Lib.ExpQ

infixl 9 Language.Haskell.TH.Lib.letS
Language.Haskell.TH.Lib.letS ::
  [Language.Haskell.TH.Lib.DecQ] ->
  Language.Haskell.TH.Lib.StmtQ

infixl 9 Language.Haskell.TH.Lib.listE
Language.Haskell.TH.Lib.listE ::
  [Language.Haskell.TH.Lib.ExpQ] ->
  Language.Haskell.TH.Lib.ExpQ

infixl 9 Language.Haskell.TH.Lib.listP
Language.Haskell.TH.Lib.listP ::
  [Language.Haskell.TH.Lib.PatQ] ->
  Language.Haskell.TH.Lib.PatQ

infixl 9 Language.Haskell.TH.Lib.listT
Language.Haskell.TH.Lib.listT ::
  Language.Haskell.TH.Lib.TypeQ

infixl 9 Language.Haskell.TH.Lib.litE
Language.Haskell.TH.Lib.litE ::
  Language.Haskell.TH.Syntax.Lit ->
  Language.Haskell.TH.Lib.ExpQ

infixl 9 Language.Haskell.TH.Lib.litP
Language.Haskell.TH.Lib.litP ::
  Language.Haskell.TH.Syntax.Lit ->
  Language.Haskell.TH.Lib.PatQ

infixl 9 Language.Haskell.TH.Lib.match
Language.Haskell.TH.Lib.match ::
  Language.Haskell.TH.Lib.PatQ ->
  Language.Haskell.TH.Lib.BodyQ ->
  [Language.Haskell.TH.Lib.DecQ] ->
  Language.Haskell.TH.Lib.MatchQ

infixl 9 Language.Haskell.TH.Lib.newtypeD
Language.Haskell.TH.Lib.newtypeD ::
  Language.Haskell.TH.Lib.CxtQ ->
  Language.Haskell.TH.Syntax.Name ->
  [Language.Haskell.TH.Syntax.TyVarBndr] ->
  Language.Haskell.TH.Lib.ConQ ->
  [Language.Haskell.TH.Syntax.Name] ->
  Language.Haskell.TH.Lib.DecQ

infixl 9 Language.Haskell.TH.Lib.newtypeInstD
Language.Haskell.TH.Lib.newtypeInstD ::
  Language.Haskell.TH.Lib.CxtQ ->
  Language.Haskell.TH.Syntax.Name ->
  [Language.Haskell.TH.Lib.TypeQ] ->
  Language.Haskell.TH.Lib.ConQ ->
  [Language.Haskell.TH.Syntax.Name] ->
  Language.Haskell.TH.Lib.DecQ

infixl 9 Language.Haskell.TH.Lib.noBindS
Language.Haskell.TH.Lib.noBindS ::
  Language.Haskell.TH.Lib.ExpQ ->
  Language.Haskell.TH.Lib.StmtQ

infixl 9 Language.Haskell.TH.Lib.normalB
Language.Haskell.TH.Lib.normalB ::
  Language.Haskell.TH.Lib.ExpQ ->
  Language.Haskell.TH.Lib.BodyQ

infixl 9 Language.Haskell.TH.Lib.normalC
Language.Haskell.TH.Lib.normalC ::
  Language.Haskell.TH.Syntax.Name ->
  [Language.Haskell.TH.Lib.StrictTypeQ] ->
  Language.Haskell.TH.Lib.ConQ

infixl 9 Language.Haskell.TH.Lib.normalG
Language.Haskell.TH.Lib.normalG ::
  Language.Haskell.TH.Lib.ExpQ ->
  Language.Haskell.TH.Lib.GuardQ

infixl 9 Language.Haskell.TH.Lib.normalGE
Language.Haskell.TH.Lib.normalGE ::
  Language.Haskell.TH.Lib.ExpQ ->
  Language.Haskell.TH.Lib.ExpQ ->
  Language.Haskell.TH.Syntax.Q (Language.Haskell.TH.Syntax.Guard, Language.Haskell.TH.Syntax.Exp)

infixl 9 Language.Haskell.TH.Lib.notStrict
Language.Haskell.TH.Lib.notStrict ::
  Language.Haskell.TH.Syntax.Q Language.Haskell.TH.Syntax.Strict

infixl 9 Language.Haskell.TH.Lib.parS
Language.Haskell.TH.Lib.parS ::
  [[Language.Haskell.TH.Lib.StmtQ]] ->
  Language.Haskell.TH.Lib.StmtQ

infixl 9 Language.Haskell.TH.Lib.parensE
Language.Haskell.TH.Lib.parensE ::
  Language.Haskell.TH.Lib.ExpQ ->
  Language.Haskell.TH.Lib.ExpQ

infixl 9 Language.Haskell.TH.Lib.parensP
Language.Haskell.TH.Lib.parensP ::
  Language.Haskell.TH.Lib.PatQ ->
  Language.Haskell.TH.Lib.PatQ

infixl 9 Language.Haskell.TH.Lib.patG
Language.Haskell.TH.Lib.patG ::
  [Language.Haskell.TH.Lib.StmtQ] ->
  Language.Haskell.TH.Lib.GuardQ

infixl 9 Language.Haskell.TH.Lib.patGE
Language.Haskell.TH.Lib.patGE ::
  [Language.Haskell.TH.Lib.StmtQ] ->
  Language.Haskell.TH.Lib.ExpQ ->
  Language.Haskell.TH.Syntax.Q (Language.Haskell.TH.Syntax.Guard, Language.Haskell.TH.Syntax.Exp)

infixl 9 Language.Haskell.TH.Lib.pragInlD
Language.Haskell.TH.Lib.pragInlD ::
  Language.Haskell.TH.Syntax.Name ->
  Language.Haskell.TH.Lib.InlineSpecQ ->
  Language.Haskell.TH.Lib.DecQ

infixl 9 Language.Haskell.TH.Lib.pragSpecD
Language.Haskell.TH.Lib.pragSpecD ::
  Language.Haskell.TH.Syntax.Name ->
  Language.Haskell.TH.Lib.TypeQ ->
  Language.Haskell.TH.Lib.DecQ

infixl 9 Language.Haskell.TH.Lib.rationalL
Language.Haskell.TH.Lib.rationalL ::
  GHC.Real.Rational ->
  Language.Haskell.TH.Syntax.Lit

infixl 9 Language.Haskell.TH.Lib.recC
Language.Haskell.TH.Lib.recC ::
  Language.Haskell.TH.Syntax.Name ->
  [Language.Haskell.TH.Lib.VarStrictTypeQ] ->
  Language.Haskell.TH.Lib.ConQ

infixl 9 Language.Haskell.TH.Lib.recConE
Language.Haskell.TH.Lib.recConE ::
  Language.Haskell.TH.Syntax.Name ->
  [Language.Haskell.TH.Syntax.Q (Language.Haskell.TH.Syntax.Name, Language.Haskell.TH.Syntax.Exp)] ->
  Language.Haskell.TH.Lib.ExpQ

infixl 9 Language.Haskell.TH.Lib.recP
Language.Haskell.TH.Lib.recP ::
  Language.Haskell.TH.Syntax.Name ->
  [Language.Haskell.TH.Lib.FieldPatQ] ->
  Language.Haskell.TH.Lib.PatQ

infixl 9 Language.Haskell.TH.Lib.recUpdE
Language.Haskell.TH.Lib.recUpdE ::
  Language.Haskell.TH.Lib.ExpQ ->
  [Language.Haskell.TH.Syntax.Q (Language.Haskell.TH.Syntax.Name, Language.Haskell.TH.Syntax.Exp)] ->
  Language.Haskell.TH.Lib.ExpQ

infixl 9 Language.Haskell.TH.Lib.safe
Language.Haskell.TH.Lib.safe ::
  Language.Haskell.TH.Syntax.Safety

infixl 9 Language.Haskell.TH.Lib.sectionL
Language.Haskell.TH.Lib.sectionL ::
  Language.Haskell.TH.Lib.ExpQ ->
  Language.Haskell.TH.Lib.ExpQ ->
  Language.Haskell.TH.Lib.ExpQ

infixl 9 Language.Haskell.TH.Lib.sectionR
Language.Haskell.TH.Lib.sectionR ::
  Language.Haskell.TH.Lib.ExpQ ->
  Language.Haskell.TH.Lib.ExpQ ->
  Language.Haskell.TH.Lib.ExpQ

infixl 9 Language.Haskell.TH.Lib.sigD
Language.Haskell.TH.Lib.sigD ::
  Language.Haskell.TH.Syntax.Name ->
  Language.Haskell.TH.Lib.TypeQ ->
  Language.Haskell.TH.Lib.DecQ

infixl 9 Language.Haskell.TH.Lib.sigE
Language.Haskell.TH.Lib.sigE ::
  Language.Haskell.TH.Lib.ExpQ ->
  Language.Haskell.TH.Lib.TypeQ ->
  Language.Haskell.TH.Lib.ExpQ

infixl 9 Language.Haskell.TH.Lib.sigP
Language.Haskell.TH.Lib.sigP ::
  Language.Haskell.TH.Lib.PatQ ->
  Language.Haskell.TH.Lib.TypeQ ->
  Language.Haskell.TH.Lib.PatQ

infixl 9 Language.Haskell.TH.Lib.sigT
Language.Haskell.TH.Lib.sigT ::
  Language.Haskell.TH.Lib.TypeQ ->
  Language.Haskell.TH.Syntax.Kind ->
  Language.Haskell.TH.Lib.TypeQ

infixl 9 Language.Haskell.TH.Lib.stdCall
Language.Haskell.TH.Lib.stdCall ::
  Language.Haskell.TH.Syntax.Callconv

infixl 9 Language.Haskell.TH.Lib.strictType
Language.Haskell.TH.Lib.strictType ::
  Language.Haskell.TH.Syntax.Q Language.Haskell.TH.Syntax.Strict ->
  Language.Haskell.TH.Lib.TypeQ ->
  Language.Haskell.TH.Lib.StrictTypeQ

infixl 9 Language.Haskell.TH.Lib.stringE
Language.Haskell.TH.Lib.stringE ::
  GHC.Base.String ->
  Language.Haskell.TH.Lib.ExpQ

infixl 9 Language.Haskell.TH.Lib.stringL
Language.Haskell.TH.Lib.stringL ::
  GHC.Base.String ->
  Language.Haskell.TH.Syntax.Lit

infixl 9 Language.Haskell.TH.Lib.stringPrimL
Language.Haskell.TH.Lib.stringPrimL ::
  GHC.Base.String ->
  Language.Haskell.TH.Syntax.Lit

infixl 9 Language.Haskell.TH.Lib.tildeP
Language.Haskell.TH.Lib.tildeP ::
  Language.Haskell.TH.Lib.PatQ ->
  Language.Haskell.TH.Lib.PatQ

infixl 9 Language.Haskell.TH.Lib.tupE
Language.Haskell.TH.Lib.tupE ::
  [Language.Haskell.TH.Lib.ExpQ] ->
  Language.Haskell.TH.Lib.ExpQ

infixl 9 Language.Haskell.TH.Lib.tupP
Language.Haskell.TH.Lib.tupP ::
  [Language.Haskell.TH.Lib.PatQ] ->
  Language.Haskell.TH.Lib.PatQ

infixl 9 Language.Haskell.TH.Lib.tupleT
Language.Haskell.TH.Lib.tupleT ::
  GHC.Types.Int ->
  Language.Haskell.TH.Lib.TypeQ

infixl 9 Language.Haskell.TH.Lib.tySynD
Language.Haskell.TH.Lib.tySynD ::
  Language.Haskell.TH.Syntax.Name ->
  [Language.Haskell.TH.Syntax.TyVarBndr] ->
  Language.Haskell.TH.Lib.TypeQ ->
  Language.Haskell.TH.Lib.DecQ

infixl 9 Language.Haskell.TH.Lib.tySynInstD
Language.Haskell.TH.Lib.tySynInstD ::
  Language.Haskell.TH.Syntax.Name ->
  [Language.Haskell.TH.Lib.TypeQ] ->
  Language.Haskell.TH.Lib.TypeQ ->
  Language.Haskell.TH.Lib.DecQ

infixl 9 Language.Haskell.TH.Lib.typeFam
Language.Haskell.TH.Lib.typeFam ::
  Language.Haskell.TH.Syntax.FamFlavour

infixl 9 Language.Haskell.TH.Lib.uInfixE
Language.Haskell.TH.Lib.uInfixE ::
  Language.Haskell.TH.Lib.ExpQ ->
  Language.Haskell.TH.Lib.ExpQ ->
  Language.Haskell.TH.Lib.ExpQ ->
  Language.Haskell.TH.Lib.ExpQ

infixl 9 Language.Haskell.TH.Lib.uInfixP
Language.Haskell.TH.Lib.uInfixP ::
  Language.Haskell.TH.Lib.PatQ ->
  Language.Haskell.TH.Syntax.Name ->
  Language.Haskell.TH.Lib.PatQ ->
  Language.Haskell.TH.Lib.PatQ

infixl 9 Language.Haskell.TH.Lib.unsafe
Language.Haskell.TH.Lib.unsafe ::
  Language.Haskell.TH.Syntax.Safety

infixl 9 Language.Haskell.TH.Lib.valD
Language.Haskell.TH.Lib.valD ::
  Language.Haskell.TH.Lib.PatQ ->
  Language.Haskell.TH.Lib.BodyQ ->
  [Language.Haskell.TH.Lib.DecQ] ->
  Language.Haskell.TH.Lib.DecQ

infixl 9 Language.Haskell.TH.Lib.varE
Language.Haskell.TH.Lib.varE ::
  Language.Haskell.TH.Syntax.Name ->
  Language.Haskell.TH.Lib.ExpQ

infixl 9 Language.Haskell.TH.Lib.varP
Language.Haskell.TH.Lib.varP ::
  Language.Haskell.TH.Syntax.Name ->
  Language.Haskell.TH.Lib.PatQ

infixl 9 Language.Haskell.TH.Lib.varStrictType
Language.Haskell.TH.Lib.varStrictType ::
  Language.Haskell.TH.Syntax.Name ->
  Language.Haskell.TH.Lib.StrictTypeQ ->
  Language.Haskell.TH.Lib.VarStrictTypeQ

infixl 9 Language.Haskell.TH.Lib.varT
Language.Haskell.TH.Lib.varT ::
  Language.Haskell.TH.Syntax.Name ->
  Language.Haskell.TH.Lib.TypeQ

infixl 9 Language.Haskell.TH.Lib.viewP
Language.Haskell.TH.Lib.viewP ::
  Language.Haskell.TH.Lib.ExpQ ->
  Language.Haskell.TH.Lib.PatQ ->
  Language.Haskell.TH.Lib.PatQ

infixl 9 Language.Haskell.TH.Lib.wildP
Language.Haskell.TH.Lib.wildP ::
  Language.Haskell.TH.Lib.PatQ

infixl 9 Language.Haskell.TH.Lib.wordPrimL
Language.Haskell.TH.Lib.wordPrimL ::
  GHC.Integer.Type.Integer ->
  Language.Haskell.TH.Syntax.Lit

infixl 9 Language.Haskell.TH.Ppr.pprExp
Language.Haskell.TH.Ppr.pprExp ::
  Language.Haskell.TH.Ppr.Precedence ->
  Language.Haskell.TH.Syntax.Exp ->
  Language.Haskell.TH.PprLib.Doc

infixl 9 Language.Haskell.TH.Ppr.pprLit
Language.Haskell.TH.Ppr.pprLit ::
  Language.Haskell.TH.Ppr.Precedence ->
  Language.Haskell.TH.Syntax.Lit ->
  Language.Haskell.TH.PprLib.Doc

infixl 9 Language.Haskell.TH.Ppr.pprParendType
Language.Haskell.TH.Ppr.pprParendType ::
  Language.Haskell.TH.Syntax.Type ->
  Language.Haskell.TH.PprLib.Doc

infixl 9 Language.Haskell.TH.Ppr.pprPat
Language.Haskell.TH.Ppr.pprPat ::
  Language.Haskell.TH.Ppr.Precedence ->
  Language.Haskell.TH.Syntax.Pat ->
  Language.Haskell.TH.PprLib.Doc

infixl 9 Language.Haskell.TH.Ppr.pprint
Language.Haskell.TH.Ppr.pprint ::
  forall a.
    (
     Language.Haskell.TH.Ppr.Ppr a
     ) =>
    a ->
    GHC.Base.String

infixl 9 Language.Haskell.TH.Syntax.defaultFixity
Language.Haskell.TH.Syntax.defaultFixity ::
  Language.Haskell.TH.Syntax.Fixity

infixl 9 Language.Haskell.TH.Syntax.isInstance
Language.Haskell.TH.Syntax.isInstance ::
  Language.Haskell.TH.Syntax.Name ->
  [Language.Haskell.TH.Syntax.Type] ->
  Language.Haskell.TH.Syntax.Q GHC.Types.Bool

infixl 9 Language.Haskell.TH.Syntax.loc_end
Language.Haskell.TH.Syntax.loc_end ::
  Language.Haskell.TH.Syntax.Loc ->
  Language.Haskell.TH.Syntax.CharPos

infixl 9 Language.Haskell.TH.Syntax.loc_filename
Language.Haskell.TH.Syntax.loc_filename ::
  Language.Haskell.TH.Syntax.Loc ->
  GHC.Base.String

infixl 9 Language.Haskell.TH.Syntax.loc_module
Language.Haskell.TH.Syntax.loc_module ::
  Language.Haskell.TH.Syntax.Loc ->
  GHC.Base.String

infixl 9 Language.Haskell.TH.Syntax.loc_package
Language.Haskell.TH.Syntax.loc_package ::
  Language.Haskell.TH.Syntax.Loc ->
  GHC.Base.String

infixl 9 Language.Haskell.TH.Syntax.loc_start
Language.Haskell.TH.Syntax.loc_start ::
  Language.Haskell.TH.Syntax.Loc ->
  Language.Haskell.TH.Syntax.CharPos

infixl 9 Language.Haskell.TH.Syntax.location
Language.Haskell.TH.Syntax.location ::
  Language.Haskell.TH.Syntax.Q Language.Haskell.TH.Syntax.Loc

infixl 9 Language.Haskell.TH.Syntax.lookupTypeName
Language.Haskell.TH.Syntax.lookupTypeName ::
  GHC.Base.String ->
  Language.Haskell.TH.Syntax.Q Data.Maybe.Maybe Language.Haskell.TH.Syntax.Name

infixl 9 Language.Haskell.TH.Syntax.lookupValueName
Language.Haskell.TH.Syntax.lookupValueName ::
  GHC.Base.String ->
  Language.Haskell.TH.Syntax.Q Data.Maybe.Maybe Language.Haskell.TH.Syntax.Name

infixl 9 Language.Haskell.TH.Syntax.maxPrecedence
Language.Haskell.TH.Syntax.maxPrecedence ::
  GHC.Types.Int

infixl 9 Language.Haskell.TH.Syntax.mkName
Language.Haskell.TH.Syntax.mkName ::
  GHC.Base.String ->
  Language.Haskell.TH.Syntax.Name

infixl 9 Language.Haskell.TH.Syntax.nameBase
Language.Haskell.TH.Syntax.nameBase ::
  Language.Haskell.TH.Syntax.Name ->
  GHC.Base.String

infixl 9 Language.Haskell.TH.Syntax.nameModule
Language.Haskell.TH.Syntax.nameModule ::
  Language.Haskell.TH.Syntax.Name ->
  Data.Maybe.Maybe GHC.Base.String

infixl 9 Language.Haskell.TH.Syntax.newName
Language.Haskell.TH.Syntax.newName ::
  GHC.Base.String ->
  Language.Haskell.TH.Syntax.Q Language.Haskell.TH.Syntax.Name

infixl 9 Language.Haskell.TH.Syntax.recover
Language.Haskell.TH.Syntax.recover ::
  forall a.
    () =>
    Language.Haskell.TH.Syntax.Q a ->
    Language.Haskell.TH.Syntax.Q a ->
    Language.Haskell.TH.Syntax.Q a

infixl 9 Language.Haskell.TH.Syntax.reify
Language.Haskell.TH.Syntax.reify ::
  Language.Haskell.TH.Syntax.Name ->
  Language.Haskell.TH.Syntax.Q Language.Haskell.TH.Syntax.Info

infixl 9 Language.Haskell.TH.Syntax.reifyInstances
Language.Haskell.TH.Syntax.reifyInstances ::
  Language.Haskell.TH.Syntax.Name ->
  [Language.Haskell.TH.Syntax.Type] ->
  Language.Haskell.TH.Syntax.Q [Language.Haskell.TH.Syntax.Dec]

infixl 9 Language.Haskell.TH.Syntax.report
Language.Haskell.TH.Syntax.report ::
  GHC.Types.Bool ->
  GHC.Base.String ->
  Language.Haskell.TH.Syntax.Q ()

infixl 9 Language.Haskell.TH.Syntax.runIO
Language.Haskell.TH.Syntax.runIO ::
  forall a.
    () =>
    GHC.Types.IO a ->
    Language.Haskell.TH.Syntax.Q a

infixl 9 Language.Haskell.TH.Syntax.runQ
Language.Haskell.TH.Syntax.runQ ::
  forall (m :: * -> *) a.
    (
     Language.Haskell.TH.Syntax.Quasi m
     ) =>
    Language.Haskell.TH.Syntax.Q a ->
    m a

infixl 9 Language.Haskell.TH.Syntax.tupleDataName
Language.Haskell.TH.Syntax.tupleDataName ::
  GHC.Types.Int ->
  Language.Haskell.TH.Syntax.Name

infixl 9 Language.Haskell.TH.Syntax.tupleTypeName
Language.Haskell.TH.Syntax.tupleTypeName ::
  GHC.Types.Int ->
  Language.Haskell.TH.Syntax.Name

type Language.Haskell.TH.Lib.BodyQ = Language.Haskell.TH.Syntax.Q Language.Haskell.TH.Syntax.Body

type Language.Haskell.TH.Lib.ClauseQ = Language.Haskell.TH.Syntax.Q Language.Haskell.TH.Syntax.Clause

type Language.Haskell.TH.Lib.ConQ = Language.Haskell.TH.Syntax.Q Language.Haskell.TH.Syntax.Con

type Language.Haskell.TH.Lib.CxtQ = Language.Haskell.TH.Syntax.Q Language.Haskell.TH.Syntax.Cxt

type Language.Haskell.TH.Lib.DecQ = Language.Haskell.TH.Syntax.Q Language.Haskell.TH.Syntax.Dec

type Language.Haskell.TH.Lib.DecsQ = Language.Haskell.TH.Syntax.Q [Language.Haskell.TH.Syntax.Dec]

type Language.Haskell.TH.Lib.ExpQ = Language.Haskell.TH.Syntax.Q Language.Haskell.TH.Syntax.Exp

type Language.Haskell.TH.Lib.FieldPatQ = Language.Haskell.TH.Syntax.Q Language.Haskell.TH.Syntax.FieldPat

type Language.Haskell.TH.Lib.GuardQ = Language.Haskell.TH.Syntax.Q Language.Haskell.TH.Syntax.Guard

type Language.Haskell.TH.Lib.InfoQ = Language.Haskell.TH.Syntax.Q Language.Haskell.TH.Syntax.Info

type Language.Haskell.TH.Lib.InlineSpecQ = Language.Haskell.TH.Syntax.Q Language.Haskell.TH.Syntax.InlineSpec

type Language.Haskell.TH.Lib.MatchQ = Language.Haskell.TH.Syntax.Q Language.Haskell.TH.Syntax.Match

type Language.Haskell.TH.Lib.PatQ = Language.Haskell.TH.Syntax.Q Language.Haskell.TH.Syntax.Pat

type Language.Haskell.TH.Lib.PredQ = Language.Haskell.TH.Syntax.Q Language.Haskell.TH.Syntax.Pred

type Language.Haskell.TH.Lib.RangeQ = Language.Haskell.TH.Syntax.Q Language.Haskell.TH.Syntax.Range

type Language.Haskell.TH.Lib.StmtQ = Language.Haskell.TH.Syntax.Q Language.Haskell.TH.Syntax.Stmt

type Language.Haskell.TH.Lib.StrictTypeQ = Language.Haskell.TH.Syntax.Q Language.Haskell.TH.Syntax.StrictType

type Language.Haskell.TH.Lib.TypeQ = Language.Haskell.TH.Syntax.Q Language.Haskell.TH.Syntax.Type

type Language.Haskell.TH.Lib.VarStrictTypeQ = Language.Haskell.TH.Syntax.Q Language.Haskell.TH.Syntax.VarStrictType

class () =>
  Language.Haskell.TH.Ppr.Ppr a where
    Language.Haskell.TH.Ppr.ppr ::
      forall a.
        (
         Language.Haskell.TH.Ppr.Ppr a
         ) =>
        a ->
        Language.Haskell.TH.PprLib.Doc
    Language.Haskell.TH.Ppr.ppr_list ::
      forall a.
        (
         Language.Haskell.TH.Ppr.Ppr a
         ) =>
        [a] ->
        Language.Haskell.TH.PprLib.Doc

data () =>
  Language.Haskell.TH.Syntax.Body  =
    Language.Haskell.TH.Syntax.GuardedB
      [(Language.Haskell.TH.Syntax.Guard, Language.Haskell.TH.Syntax.Exp)]
  | Language.Haskell.TH.Syntax.NormalB
      Language.Haskell.TH.Syntax.Exp
  deriving ()

data () =>
  Language.Haskell.TH.Syntax.Callconv  =
    Language.Haskell.TH.Syntax.CCall
  | Language.Haskell.TH.Syntax.StdCall
  deriving ()

data () =>
  Language.Haskell.TH.Syntax.Clause  =
    Language.Haskell.TH.Syntax.Clause
      [Language.Haskell.TH.Syntax.Pat]
      Language.Haskell.TH.Syntax.Body
      [Language.Haskell.TH.Syntax.Dec]
  deriving ()

data () =>
  Language.Haskell.TH.Syntax.Con  =
    Language.Haskell.TH.Syntax.NormalC
      Language.Haskell.TH.Syntax.Name
      [Language.Haskell.TH.Syntax.StrictType]
  | Language.Haskell.TH.Syntax.RecC
      Language.Haskell.TH.Syntax.Name
      [Language.Haskell.TH.Syntax.VarStrictType]
  | Language.Haskell.TH.Syntax.InfixC
      Language.Haskell.TH.Syntax.StrictType
      Language.Haskell.TH.Syntax.Name
      Language.Haskell.TH.Syntax.StrictType
  | Language.Haskell.TH.Syntax.ForallC
      [Language.Haskell.TH.Syntax.TyVarBndr]
      Language.Haskell.TH.Syntax.Cxt
      Language.Haskell.TH.Syntax.Con
  deriving ()

type Language.Haskell.TH.Syntax.Cxt = [Language.Haskell.TH.Syntax.Pred]

data () =>
  Language.Haskell.TH.Syntax.Dec  =
    Language.Haskell.TH.Syntax.FunD
      Language.Haskell.TH.Syntax.Name
      [Language.Haskell.TH.Syntax.Clause]
  | Language.Haskell.TH.Syntax.ValD
      Language.Haskell.TH.Syntax.Pat
      Language.Haskell.TH.Syntax.Body
      [Language.Haskell.TH.Syntax.Dec]
  | Language.Haskell.TH.Syntax.DataD
      Language.Haskell.TH.Syntax.Cxt
      Language.Haskell.TH.Syntax.Name
      [Language.Haskell.TH.Syntax.TyVarBndr]
      [Language.Haskell.TH.Syntax.Con]
      [Language.Haskell.TH.Syntax.Name]
  | Language.Haskell.TH.Syntax.NewtypeD
      Language.Haskell.TH.Syntax.Cxt
      Language.Haskell.TH.Syntax.Name
      [Language.Haskell.TH.Syntax.TyVarBndr]
      Language.Haskell.TH.Syntax.Con
      [Language.Haskell.TH.Syntax.Name]
  | Language.Haskell.TH.Syntax.TySynD
      Language.Haskell.TH.Syntax.Name
      [Language.Haskell.TH.Syntax.TyVarBndr]
      Language.Haskell.TH.Syntax.Type
  | Language.Haskell.TH.Syntax.ClassD
      Language.Haskell.TH.Syntax.Cxt
      Language.Haskell.TH.Syntax.Name
      [Language.Haskell.TH.Syntax.TyVarBndr]
      [Language.Haskell.TH.Syntax.FunDep]
      [Language.Haskell.TH.Syntax.Dec]
  | Language.Haskell.TH.Syntax.InstanceD
      Language.Haskell.TH.Syntax.Cxt
      Language.Haskell.TH.Syntax.Type
      [Language.Haskell.TH.Syntax.Dec]
  | Language.Haskell.TH.Syntax.SigD
      Language.Haskell.TH.Syntax.Name
      Language.Haskell.TH.Syntax.Type
  | Language.Haskell.TH.Syntax.ForeignD
      Language.Haskell.TH.Syntax.Foreign
  | Language.Haskell.TH.Syntax.PragmaD
      Language.Haskell.TH.Syntax.Pragma
  | Language.Haskell.TH.Syntax.FamilyD
      Language.Haskell.TH.Syntax.FamFlavour
      Language.Haskell.TH.Syntax.Name
      [Language.Haskell.TH.Syntax.TyVarBndr]
      Data.Maybe.Maybe Language.Haskell.TH.Syntax.Kind
  | Language.Haskell.TH.Syntax.DataInstD
      Language.Haskell.TH.Syntax.Cxt
      Language.Haskell.TH.Syntax.Name
      [Language.Haskell.TH.Syntax.Type]
      [Language.Haskell.TH.Syntax.Con]
      [Language.Haskell.TH.Syntax.Name]
  | Language.Haskell.TH.Syntax.NewtypeInstD
      Language.Haskell.TH.Syntax.Cxt
      Language.Haskell.TH.Syntax.Name
      [Language.Haskell.TH.Syntax.Type]
      Language.Haskell.TH.Syntax.Con
      [Language.Haskell.TH.Syntax.Name]
  | Language.Haskell.TH.Syntax.TySynInstD
      Language.Haskell.TH.Syntax.Name
      [Language.Haskell.TH.Syntax.Type]
      Language.Haskell.TH.Syntax.Type
  deriving ()

data () =>
  Language.Haskell.TH.Syntax.Exp  =
    Language.Haskell.TH.Syntax.VarE
      Language.Haskell.TH.Syntax.Name
  | Language.Haskell.TH.Syntax.ConE
      Language.Haskell.TH.Syntax.Name
  | Language.Haskell.TH.Syntax.LitE
      Language.Haskell.TH.Syntax.Lit
  | Language.Haskell.TH.Syntax.AppE
      Language.Haskell.TH.Syntax.Exp
      Language.Haskell.TH.Syntax.Exp
  | Language.Haskell.TH.Syntax.InfixE
      Data.Maybe.Maybe Language.Haskell.TH.Syntax.Exp
      Language.Haskell.TH.Syntax.Exp
      Data.Maybe.Maybe Language.Haskell.TH.Syntax.Exp
  | Language.Haskell.TH.Syntax.UInfixE
      Language.Haskell.TH.Syntax.Exp
      Language.Haskell.TH.Syntax.Exp
      Language.Haskell.TH.Syntax.Exp
  | Language.Haskell.TH.Syntax.ParensE
      Language.Haskell.TH.Syntax.Exp
  | Language.Haskell.TH.Syntax.LamE
      [Language.Haskell.TH.Syntax.Pat]
      Language.Haskell.TH.Syntax.Exp
  | Language.Haskell.TH.Syntax.TupE
      [Language.Haskell.TH.Syntax.Exp]
  | Language.Haskell.TH.Syntax.UnboxedTupE
      [Language.Haskell.TH.Syntax.Exp]
  | Language.Haskell.TH.Syntax.CondE
      Language.Haskell.TH.Syntax.Exp
      Language.Haskell.TH.Syntax.Exp
      Language.Haskell.TH.Syntax.Exp
  | Language.Haskell.TH.Syntax.LetE
      [Language.Haskell.TH.Syntax.Dec]
      Language.Haskell.TH.Syntax.Exp
  | Language.Haskell.TH.Syntax.CaseE
      Language.Haskell.TH.Syntax.Exp
      [Language.Haskell.TH.Syntax.Match]
  | Language.Haskell.TH.Syntax.DoE
      [Language.Haskell.TH.Syntax.Stmt]
  | Language.Haskell.TH.Syntax.CompE
      [Language.Haskell.TH.Syntax.Stmt]
  | Language.Haskell.TH.Syntax.ArithSeqE
      Language.Haskell.TH.Syntax.Range
  | Language.Haskell.TH.Syntax.ListE
      [Language.Haskell.TH.Syntax.Exp]
  | Language.Haskell.TH.Syntax.SigE
      Language.Haskell.TH.Syntax.Exp
      Language.Haskell.TH.Syntax.Type
  | Language.Haskell.TH.Syntax.RecConE
      Language.Haskell.TH.Syntax.Name
      [Language.Haskell.TH.Syntax.FieldExp]
  | Language.Haskell.TH.Syntax.RecUpdE
      Language.Haskell.TH.Syntax.Exp
      [Language.Haskell.TH.Syntax.FieldExp]
  deriving ()

data () =>
  Language.Haskell.TH.Syntax.FamFlavour  =
    Language.Haskell.TH.Syntax.TypeFam
  | Language.Haskell.TH.Syntax.DataFam
  deriving ()

type Language.Haskell.TH.Syntax.FieldExp = (Language.Haskell.TH.Syntax.Name, Language.Haskell.TH.Syntax.Exp)

type Language.Haskell.TH.Syntax.FieldPat = (Language.Haskell.TH.Syntax.Name, Language.Haskell.TH.Syntax.Pat)

data () =>
  Language.Haskell.TH.Syntax.Fixity  =
    Language.Haskell.TH.Syntax.Fixity
      GHC.Types.Int
      Language.Haskell.TH.Syntax.FixityDirection
  deriving ()

data () =>
  Language.Haskell.TH.Syntax.FixityDirection  =
    Language.Haskell.TH.Syntax.InfixL
  | Language.Haskell.TH.Syntax.InfixR
  | Language.Haskell.TH.Syntax.InfixN
  deriving ()

data () =>
  Language.Haskell.TH.Syntax.Foreign  =
    Language.Haskell.TH.Syntax.ImportF
      Language.Haskell.TH.Syntax.Callconv
      Language.Haskell.TH.Syntax.Safety
      GHC.Base.String
      Language.Haskell.TH.Syntax.Name
      Language.Haskell.TH.Syntax.Type
  | Language.Haskell.TH.Syntax.ExportF
      Language.Haskell.TH.Syntax.Callconv
      GHC.Base.String
      Language.Haskell.TH.Syntax.Name
      Language.Haskell.TH.Syntax.Type
  deriving ()

data () =>
  FunDep'  =
    FunDep
      [Language.Haskell.TH.Syntax.Name]
      [Language.Haskell.TH.Syntax.Name]
  deriving ()

data () =>
  Language.Haskell.TH.Syntax.Guard  =
    Language.Haskell.TH.Syntax.NormalG
      Language.Haskell.TH.Syntax.Exp
  | Language.Haskell.TH.Syntax.PatG
      [Language.Haskell.TH.Syntax.Stmt]
  deriving ()

data () =>
  Language.Haskell.TH.Syntax.Info  =
    Language.Haskell.TH.Syntax.ClassI
      Language.Haskell.TH.Syntax.Dec
      [Language.Haskell.TH.Syntax.InstanceDec]
  | Language.Haskell.TH.Syntax.ClassOpI
      Language.Haskell.TH.Syntax.Name
      Language.Haskell.TH.Syntax.Type
      Language.Haskell.TH.Syntax.Name
      Language.Haskell.TH.Syntax.Fixity
  | Language.Haskell.TH.Syntax.TyConI
      Language.Haskell.TH.Syntax.Dec
  | Language.Haskell.TH.Syntax.FamilyI
      Language.Haskell.TH.Syntax.Dec
      [Language.Haskell.TH.Syntax.InstanceDec]
  | Language.Haskell.TH.Syntax.PrimTyConI
      Language.Haskell.TH.Syntax.Name
      GHC.Types.Int
      GHC.Types.Bool
  | Language.Haskell.TH.Syntax.DataConI
      Language.Haskell.TH.Syntax.Name
      Language.Haskell.TH.Syntax.Type
      Language.Haskell.TH.Syntax.Name
      Language.Haskell.TH.Syntax.Fixity
  | Language.Haskell.TH.Syntax.VarI
      Language.Haskell.TH.Syntax.Name
      Language.Haskell.TH.Syntax.Type
      Data.Maybe.Maybe Language.Haskell.TH.Syntax.Dec
      Language.Haskell.TH.Syntax.Fixity
  | Language.Haskell.TH.Syntax.TyVarI
      Language.Haskell.TH.Syntax.Name
      Language.Haskell.TH.Syntax.Type
  deriving ()

data () =>
  Language.Haskell.TH.Syntax.InlineSpec  =
    Language.Haskell.TH.Syntax.InlineSpec
      GHC.Types.Bool
      GHC.Types.Bool
      Data.Maybe.Maybe (GHC.Types.Bool, GHC.Types.Int)
  deriving ()

data () =>
  Language.Haskell.TH.Syntax.Kind  =
    Language.Haskell.TH.Syntax.StarK
  | Language.Haskell.TH.Syntax.ArrowK
      Language.Haskell.TH.Syntax.Kind
      Language.Haskell.TH.Syntax.Kind
  deriving ()

data () =>
  Language.Haskell.TH.Syntax.Lit  =
    Language.Haskell.TH.Syntax.CharL
      GHC.Types.Char
  | Language.Haskell.TH.Syntax.StringL
      GHC.Base.String
  | Language.Haskell.TH.Syntax.IntegerL
      GHC.Integer.Type.Integer
  | Language.Haskell.TH.Syntax.RationalL
      GHC.Real.Rational
  | Language.Haskell.TH.Syntax.IntPrimL
      GHC.Integer.Type.Integer
  | Language.Haskell.TH.Syntax.WordPrimL
      GHC.Integer.Type.Integer
  | Language.Haskell.TH.Syntax.FloatPrimL
      GHC.Real.Rational
  | Language.Haskell.TH.Syntax.DoublePrimL
      GHC.Real.Rational
  | Language.Haskell.TH.Syntax.StringPrimL
      GHC.Base.String
  deriving ()

data () =>
  Language.Haskell.TH.Syntax.Loc  =
    Language.Haskell.TH.Syntax.Loc
      Language.Haskell.TH.Syntax.loc_filename :: GHC.Base.String
      Language.Haskell.TH.Syntax.loc_package :: GHC.Base.String
      Language.Haskell.TH.Syntax.loc_module :: GHC.Base.String
      Language.Haskell.TH.Syntax.loc_start :: Language.Haskell.TH.Syntax.CharPos
      Language.Haskell.TH.Syntax.loc_end :: Language.Haskell.TH.Syntax.CharPos
  deriving ()

data () =>
  Language.Haskell.TH.Syntax.Match  =
    Language.Haskell.TH.Syntax.Match
      Language.Haskell.TH.Syntax.Pat
      Language.Haskell.TH.Syntax.Body
      [Language.Haskell.TH.Syntax.Dec]
  deriving ()

data () =>
  Name'  =
    Name
      Language.Haskell.TH.Syntax.Internals.OccName
      Language.Haskell.TH.Syntax.NameFlavour
  deriving ()

data () =>
  Language.Haskell.TH.Syntax.NameSpace  =
    Language.Haskell.TH.Syntax.VarName
  | Language.Haskell.TH.Syntax.DataName
  | Language.Haskell.TH.Syntax.TcClsName
  deriving ()

data () =>
  Language.Haskell.TH.Syntax.Pat  =
    Language.Haskell.TH.Syntax.LitP
      Language.Haskell.TH.Syntax.Lit
  | Language.Haskell.TH.Syntax.VarP
      Language.Haskell.TH.Syntax.Name
  | Language.Haskell.TH.Syntax.TupP
      [Language.Haskell.TH.Syntax.Pat]
  | Language.Haskell.TH.Syntax.UnboxedTupP
      [Language.Haskell.TH.Syntax.Pat]
  | Language.Haskell.TH.Syntax.ConP
      Language.Haskell.TH.Syntax.Name
      [Language.Haskell.TH.Syntax.Pat]
  | Language.Haskell.TH.Syntax.InfixP
      Language.Haskell.TH.Syntax.Pat
      Language.Haskell.TH.Syntax.Name
      Language.Haskell.TH.Syntax.Pat
  | Language.Haskell.TH.Syntax.UInfixP
      Language.Haskell.TH.Syntax.Pat
      Language.Haskell.TH.Syntax.Name
      Language.Haskell.TH.Syntax.Pat
  | Language.Haskell.TH.Syntax.ParensP
      Language.Haskell.TH.Syntax.Pat
  | Language.Haskell.TH.Syntax.TildeP
      Language.Haskell.TH.Syntax.Pat
  | Language.Haskell.TH.Syntax.BangP
      Language.Haskell.TH.Syntax.Pat
  | Language.Haskell.TH.Syntax.AsP
      Language.Haskell.TH.Syntax.Name
      Language.Haskell.TH.Syntax.Pat
  | Language.Haskell.TH.Syntax.WildP
  | Language.Haskell.TH.Syntax.RecP
      Language.Haskell.TH.Syntax.Name
      [Language.Haskell.TH.Syntax.FieldPat]
  | Language.Haskell.TH.Syntax.ListP
      [Language.Haskell.TH.Syntax.Pat]
  | Language.Haskell.TH.Syntax.SigP
      Language.Haskell.TH.Syntax.Pat
      Language.Haskell.TH.Syntax.Type
  | Language.Haskell.TH.Syntax.ViewP
      Language.Haskell.TH.Syntax.Exp
      Language.Haskell.TH.Syntax.Pat
  deriving ()

data () =>
  Language.Haskell.TH.Syntax.Pragma  =
    Language.Haskell.TH.Syntax.InlineP
      Language.Haskell.TH.Syntax.Name
      Language.Haskell.TH.Syntax.InlineSpec
  | Language.Haskell.TH.Syntax.SpecialiseP
      Language.Haskell.TH.Syntax.Name
      Language.Haskell.TH.Syntax.Type
      Data.Maybe.Maybe Language.Haskell.TH.Syntax.InlineSpec
  deriving ()

data () =>
  Language.Haskell.TH.Syntax.Pred  =
    Language.Haskell.TH.Syntax.ClassP
      Language.Haskell.TH.Syntax.Name
      [Language.Haskell.TH.Syntax.Type]
  | Language.Haskell.TH.Syntax.EqualP
      Language.Haskell.TH.Syntax.Type
      Language.Haskell.TH.Syntax.Type
  deriving ()

newtype () =>
  Q' a =
    Q
      Language.Haskell.TH.Syntax.unQ :: (forall (m :: * -> *). 
                                         (
                                          Language.Haskell.TH.Syntax.Quasi m
                                          ) =>m a)
  deriving ()

data () =>
  Language.Haskell.TH.Syntax.Range  =
    Language.Haskell.TH.Syntax.FromR
      Language.Haskell.TH.Syntax.Exp
  | Language.Haskell.TH.Syntax.FromThenR
      Language.Haskell.TH.Syntax.Exp
      Language.Haskell.TH.Syntax.Exp
  | Language.Haskell.TH.Syntax.FromToR
      Language.Haskell.TH.Syntax.Exp
      Language.Haskell.TH.Syntax.Exp
  | Language.Haskell.TH.Syntax.FromThenToR
      Language.Haskell.TH.Syntax.Exp
      Language.Haskell.TH.Syntax.Exp
      Language.Haskell.TH.Syntax.Exp
  deriving ()

data () =>
  Language.Haskell.TH.Syntax.Safety  =
    Language.Haskell.TH.Syntax.Unsafe
  | Language.Haskell.TH.Syntax.Safe
  | Language.Haskell.TH.Syntax.Interruptible
  deriving ()

data () =>
  Language.Haskell.TH.Syntax.Stmt  =
    Language.Haskell.TH.Syntax.BindS
      Language.Haskell.TH.Syntax.Pat
      Language.Haskell.TH.Syntax.Exp
  | Language.Haskell.TH.Syntax.LetS
      [Language.Haskell.TH.Syntax.Dec]
  | Language.Haskell.TH.Syntax.NoBindS
      Language.Haskell.TH.Syntax.Exp
  | Language.Haskell.TH.Syntax.ParS
      [[Language.Haskell.TH.Syntax.Stmt]]
  deriving ()

data () =>
  Language.Haskell.TH.Syntax.Strict  =
    Language.Haskell.TH.Syntax.IsStrict
  | Language.Haskell.TH.Syntax.NotStrict
  | Language.Haskell.TH.Syntax.Unpacked
  deriving ()

data () =>
  Language.Haskell.TH.Syntax.TyVarBndr  =
    Language.Haskell.TH.Syntax.PlainTV
      Language.Haskell.TH.Syntax.Name
  | Language.Haskell.TH.Syntax.KindedTV
      Language.Haskell.TH.Syntax.Name
      Language.Haskell.TH.Syntax.Kind
  deriving ()

data () =>
  Language.Haskell.TH.Syntax.Type  =
    Language.Haskell.TH.Syntax.ForallT
      [Language.Haskell.TH.Syntax.TyVarBndr]
      Language.Haskell.TH.Syntax.Cxt
      Language.Haskell.TH.Syntax.Type
  | Language.Haskell.TH.Syntax.VarT
      Language.Haskell.TH.Syntax.Name
  | Language.Haskell.TH.Syntax.ConT
      Language.Haskell.TH.Syntax.Name
  | Language.Haskell.TH.Syntax.TupleT
      GHC.Types.Int
  | Language.Haskell.TH.Syntax.UnboxedTupleT
      GHC.Types.Int
  | Language.Haskell.TH.Syntax.ArrowT
  | Language.Haskell.TH.Syntax.ListT
  | Language.Haskell.TH.Syntax.AppT
      Language.Haskell.TH.Syntax.Type
      Language.Haskell.TH.Syntax.Type
  | Language.Haskell.TH.Syntax.SigT
      Language.Haskell.TH.Syntax.Type
      Language.Haskell.TH.Syntax.Kind
  deriving ()

