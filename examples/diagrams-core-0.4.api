----------------------------------------
module Graphics.Rendering.Diagrams

class ()
 => (Graphics.Rendering.Diagrams.Names.Qualifiable) q_0 where
  (Graphics.Rendering.Diagrams.Names.|>) ::
    forall q_0. ((Graphics.Rendering.Diagrams.Names.Qualifiable) (q_0)) =>
      forall a_1. ((Graphics.Rendering.Diagrams.Names.IsName) (a_1)) =>
        (a_1) ->
        (q_0) ->
        (q_0)

class ()
 => (Graphics.Rendering.Diagrams.Style.HasStyle) a_0 where
  (Graphics.Rendering.Diagrams.Style.applyStyle) ::
    forall a_0. ((Graphics.Rendering.Diagrams.Style.HasStyle) (a_0)) =>
      (Graphics.Rendering.Diagrams.Style.Style) ->
      (a_0) ->
      (a_0)

class ((Data.Typeable.Internal.Typeable) (a_0), (Data.Semigroup.Semigroup) (a_0))
 => (Graphics.Rendering.Diagrams.Style.AttributeClass) a_0 where

class ((Data.Typeable.Internal.Typeable) (a_0), (GHC.Show.Show) (a_0), (GHC.Classes.Ord) (a_0))
 => (Graphics.Rendering.Diagrams.Names.IsName) a_0 where
  (Graphics.Rendering.Diagrams.Names.toName) ::
    forall a_0. ((Graphics.Rendering.Diagrams.Names.IsName) (a_0)) =>
      (a_0) ->
      (Graphics.Rendering.Diagrams.Names.Name)

class ((GHC.Float.Floating) (s_0), (GHC.Real.Fractional) (s_0), (GHC.Classes.Ord) (s_0), (Data.AdditiveGroup.AdditiveGroup) (s_0))
 => (Graphics.Rendering.Diagrams.Bounds.OrderedField) s_0 where

class ((Graphics.Rendering.Diagrams.Core.Backend) (b_0) (v_1))
 => (Graphics.Rendering.Diagrams.Core.MultiBackend) b_0 v_1 where
  (Graphics.Rendering.Diagrams.Core.renderDias) ::
    forall b_0 v_1. ((Graphics.Rendering.Diagrams.Core.MultiBackend) (b_0) (v_1)) =>
      forall m_2. () =>
        (b_0) ->
        (Graphics.Rendering.Diagrams.Core.Options) ->
        [(Graphics.Rendering.Diagrams.Core.AnnDiagram)] ->
        (Graphics.Rendering.Diagrams.Core.Result)

class ((Data.Monoid.Monoid) (Graphics.Rendering.Diagrams.Core.Render), (Graphics.Rendering.Diagrams.Transform.HasLinearMap) (v_0))
 => (Graphics.Rendering.Diagrams.Core.Backend) b_1 v_0 where
  (Graphics.Rendering.Diagrams.Core.withStyle) ::
    forall b_1 v_0. ((Graphics.Rendering.Diagrams.Core.Backend) (b_1) (v_0)) =>
      (b_1) ->
      (Graphics.Rendering.Diagrams.Style.Style) ->
      (Graphics.Rendering.Diagrams.Transform.Transformation) ->
      (Graphics.Rendering.Diagrams.Core.Render) ->
      (Graphics.Rendering.Diagrams.Core.Render)
  (Graphics.Rendering.Diagrams.Core.doRender) ::
    forall b_1 v_0. ((Graphics.Rendering.Diagrams.Core.Backend) (b_1) (v_0)) =>
      (b_1) ->
      (Graphics.Rendering.Diagrams.Core.Options) ->
      (Graphics.Rendering.Diagrams.Core.Render) ->
      (Graphics.Rendering.Diagrams.Core.Result)
  (Graphics.Rendering.Diagrams.Core.adjustDia) ::
    forall b_1 v_0. ((Graphics.Rendering.Diagrams.Core.Backend) (b_1) (v_0)) =>
      forall m_2. ((Data.Monoid.Monoid) (m_2)) =>
        (b_1) ->
        (Graphics.Rendering.Diagrams.Core.Options) ->
        (Graphics.Rendering.Diagrams.Core.AnnDiagram) ->
        (Graphics.Rendering.Diagrams.Core.AnnDiagram)
  (Graphics.Rendering.Diagrams.Core.renderDia) ::
    forall b_1 v_0. ((Graphics.Rendering.Diagrams.Core.Backend) (b_1) (v_0)) =>
      forall m_3. ((Data.Monoid.Monoid) (m_3), (Graphics.Rendering.Diagrams.Bounds.OrderedField) (Data.VectorSpace.Scalar), (Data.VectorSpace.InnerSpace) (v_0)) =>
        (b_1) ->
        (Graphics.Rendering.Diagrams.Core.Options) ->
        (Graphics.Rendering.Diagrams.Core.AnnDiagram) ->
        (Graphics.Rendering.Diagrams.Core.Result)

class ((Graphics.Rendering.Diagrams.Transform.HasLinearMap) (Graphics.Rendering.Diagrams.V.V))
 => (Graphics.Rendering.Diagrams.Transform.Transformable) t_0 where
  (Graphics.Rendering.Diagrams.Transform.transform) ::
    forall t_0. ((Graphics.Rendering.Diagrams.Transform.Transformable) (t_0)) =>
      (Graphics.Rendering.Diagrams.Transform.Transformation) ->
      (t_0) ->
      (t_0)

class ((Graphics.Rendering.Diagrams.Transform.Transformable) (t_0))
 => (Graphics.Rendering.Diagrams.Core.Renderable) t_0 b_1 where
  (Graphics.Rendering.Diagrams.Core.render) ::
    forall t_0 b_1. ((Graphics.Rendering.Diagrams.Core.Renderable) (t_0) (b_1)) =>
      (b_1) ->
      (t_0) ->
      (Graphics.Rendering.Diagrams.Core.Render)

class ((Data.MemoTrie.HasTrie) (Data.Basis.Basis), (Data.Basis.HasBasis) (v_0), (Data.VectorSpace.VectorSpace) (v_0))
 => (Graphics.Rendering.Diagrams.Transform.HasLinearMap) v_0 where

class ((Graphics.Rendering.Diagrams.Bounds.OrderedField) (Data.VectorSpace.Scalar), (Data.VectorSpace.InnerSpace) (Graphics.Rendering.Diagrams.V.V))
 => (Graphics.Rendering.Diagrams.Bounds.Boundable) b_0 where
  (Graphics.Rendering.Diagrams.Bounds.getBounds) ::
    forall b_0. ((Graphics.Rendering.Diagrams.Bounds.Boundable) (b_0)) =>
      (b_0) ->
      (Graphics.Rendering.Diagrams.Bounds.Bounds)

class ((Data.VectorSpace.VectorSpace) (Graphics.Rendering.Diagrams.V.V))
 => (Graphics.Rendering.Diagrams.HasOrigin.HasOrigin) t_0 where
  (Graphics.Rendering.Diagrams.HasOrigin.moveOriginTo) ::
    forall t_0. ((Graphics.Rendering.Diagrams.HasOrigin.HasOrigin) (t_0)) =>
      (Graphics.Rendering.Diagrams.Points.Point) ->
      (t_0) ->
      (t_0)

data 
()
 => (Graphics.Rendering.Diagrams.Core.Prim) b_0 v_1 =
forall t_2 . (v_1 ~ Graphics.Rendering.Diagrams.V.V t_2,
              Graphics.Rendering.Diagrams.Core.Renderable t_2 b_0) =>
             Graphics.Rendering.Diagrams.Core.Prim t_2
deriving  ()

data 
()
 => (Graphics.Rendering.Diagrams.Names.AName)  =
forall a_0 . (Data.Typeable.Internal.Typeable a_0,
              GHC.Classes.Ord a_0,
              GHC.Show.Show a_0) =>
             Graphics.Rendering.Diagrams.Names.AName a_0
deriving  ()

data 
()
 => (Graphics.Rendering.Diagrams.Style.Attribute) v_0 =
forall a_1 . Graphics.Rendering.Diagrams.Style.AttributeClass a_1 =>
             Graphics.Rendering.Diagrams.Style.Attribute a_1 |
forall a_2 . (Graphics.Rendering.Diagrams.Style.AttributeClass a_2,
              Graphics.Rendering.Diagrams.Transform.Transformable a_2,
              Graphics.Rendering.Diagrams.V.V a_2 ~ v_0) =>
             Graphics.Rendering.Diagrams.Style.TAttribute a_2
deriving  ()

data 
()
 => (Graphics.Rendering.Diagrams.Transform.:-:) u_0 v_1 =
(Data.LinearMap.:-* u_0
                    v_1) Graphics.Rendering.Diagrams.Transform.:-: (Data.LinearMap.:-* v_1
                                                                                       u_0)
deriving  ()

data 
()
 => (Graphics.Rendering.Diagrams.Transform.Transformation) v_0 =
Graphics.Rendering.Diagrams.Transform.Transformation (Graphics.Rendering.Diagrams.Transform.:-: v_0
                                                                                                v_0)
                                                     (Graphics.Rendering.Diagrams.Transform.:-: v_0
                                                                                                v_0)
                                                     v_0
deriving  ()

newtype 
()
 => (Graphics.Rendering.Diagrams.Bounds.Bounds) v_0 =
Graphics.Rendering.Diagrams.Bounds.Bounds {Graphics.Rendering.Diagrams.Bounds.appBounds :: (v_0 ->
                                                                                            Data.VectorSpace.Scalar v_0)}
deriving  ()

newtype 
()
 => (Graphics.Rendering.Diagrams.Core.AnnDiagram) b_0 v_1 m_2 =
Graphics.Rendering.Diagrams.Core.AD {Graphics.Rendering.Diagrams.Core.unAD :: (Graphics.Rendering.Diagrams.UDTree.UDTree (Graphics.Rendering.Diagrams.Core.UpAnnots v_1
                                                                                                                                                                    m_2)
                                                                                                                         (Graphics.Rendering.Diagrams.Core.DownAnnots v_1)
                                                                                                                         (Graphics.Rendering.Diagrams.Core.Prim b_0
                                                                                                                                                                v_1))}
deriving  ()

newtype 
()
 => (Graphics.Rendering.Diagrams.Names.Name)  =
Graphics.Rendering.Diagrams.Names.Name ([Graphics.Rendering.Diagrams.Names.AName])
deriving  ()

newtype 
()
 => (Graphics.Rendering.Diagrams.Names.NameMap) v_0 =
Graphics.Rendering.Diagrams.Names.NameMap (Data.Map.Map Graphics.Rendering.Diagrams.Names.Name
                                                        ([(Graphics.Rendering.Diagrams.Points.Point v_0,
                                                           Graphics.Rendering.Diagrams.Transform.TransInv (Graphics.Rendering.Diagrams.Bounds.Bounds v_0))]))
deriving  ()

newtype 
()
 => (Graphics.Rendering.Diagrams.Points.Point) v_0 =
Graphics.Rendering.Diagrams.Points.P v_0
deriving  ()

newtype 
()
 => (Graphics.Rendering.Diagrams.Query.Query) v_0 m_1 =
Graphics.Rendering.Diagrams.Query.Query {Graphics.Rendering.Diagrams.Query.runQuery :: (Graphics.Rendering.Diagrams.Points.Point v_0 ->
                                                                                        m_1)}
deriving  ()

newtype 
()
 => (Graphics.Rendering.Diagrams.Style.Style) v_0 =
Graphics.Rendering.Diagrams.Style.Style (Data.Map.Map GHC.Base.String
                                                      (Graphics.Rendering.Diagrams.Style.Attribute v_0))
deriving  ()

newtype 
()
 => (Graphics.Rendering.Diagrams.Transform.TransInv) t_0 =
Graphics.Rendering.Diagrams.Transform.TransInv {Graphics.Rendering.Diagrams.Transform.unTransInv :: t_0}
deriving  ()











infixl 9 (Graphics.Rendering.Diagrams.Bounds.appBounds)
(Graphics.Rendering.Diagrams.Bounds.appBounds) ::
  forall v_0. () =>
    (Graphics.Rendering.Diagrams.Bounds.Bounds) ->
    (v_0) ->
    (Data.VectorSpace.Scalar)

infixl 9 (Graphics.Rendering.Diagrams.Bounds.boundary)
(Graphics.Rendering.Diagrams.Bounds.boundary) ::
  forall a_0. ((Graphics.Rendering.Diagrams.Bounds.Boundable) (a_0)) =>
    (Graphics.Rendering.Diagrams.V.V) ->
    (a_0) ->
    (Graphics.Rendering.Diagrams.Points.Point)

infixl 9 (Graphics.Rendering.Diagrams.Bounds.boundaryFrom)
(Graphics.Rendering.Diagrams.Bounds.boundaryFrom) ::
  forall a_0. ((Graphics.Rendering.Diagrams.Bounds.Boundable) (a_0)) =>
    (Graphics.Rendering.Diagrams.Points.Point) ->
    (Graphics.Rendering.Diagrams.V.V) ->
    (a_0) ->
    (Graphics.Rendering.Diagrams.Points.Point)

infixl 9 (Graphics.Rendering.Diagrams.Bounds.boundaryV)
(Graphics.Rendering.Diagrams.Bounds.boundaryV) ::
  forall a_0. ((Graphics.Rendering.Diagrams.Bounds.Boundable) (a_0)) =>
    (Graphics.Rendering.Diagrams.V.V) ->
    (a_0) ->
    (Graphics.Rendering.Diagrams.V.V)

infixl 9 (Graphics.Rendering.Diagrams.Bounds.diameter)
(Graphics.Rendering.Diagrams.Bounds.diameter) ::
  forall a_0. ((Graphics.Rendering.Diagrams.Bounds.Boundable) (a_0)) =>
    (Graphics.Rendering.Diagrams.V.V) ->
    (a_0) ->
    (Data.VectorSpace.Scalar)

infixl 9 (Graphics.Rendering.Diagrams.Bounds.radius)
(Graphics.Rendering.Diagrams.Bounds.radius) ::
  forall a_0. ((Graphics.Rendering.Diagrams.Bounds.Boundable) (a_0)) =>
    (Graphics.Rendering.Diagrams.V.V) ->
    (a_0) ->
    (Data.VectorSpace.Scalar)

infixl 6 (Graphics.Rendering.Diagrams.Core.atop)
(Graphics.Rendering.Diagrams.Core.atop) ::
  forall v_0 m_1 b_2. ((Data.Monoid.Monoid) (m_1), (Graphics.Rendering.Diagrams.Bounds.OrderedField) (Data.VectorSpace.Scalar), (Graphics.Rendering.Diagrams.Transform.HasLinearMap) (v_0), (Data.VectorSpace.InnerSpace) (v_0)) =>
    (Graphics.Rendering.Diagrams.Core.AnnDiagram) ->
    (Graphics.Rendering.Diagrams.Core.AnnDiagram) ->
    (Graphics.Rendering.Diagrams.Core.AnnDiagram)

infixl 9 (Graphics.Rendering.Diagrams.Core.bounds)
(Graphics.Rendering.Diagrams.Core.bounds) ::
  forall v_0 b_1 m_2. ((Graphics.Rendering.Diagrams.Bounds.OrderedField) (Data.VectorSpace.Scalar), (Graphics.Rendering.Diagrams.Transform.HasLinearMap) (v_0), (Data.VectorSpace.InnerSpace) (v_0)) =>
    (Graphics.Rendering.Diagrams.Core.AnnDiagram) ->
    (Graphics.Rendering.Diagrams.Bounds.Bounds)

infixl 9 (Graphics.Rendering.Diagrams.Core.clearValue)
(Graphics.Rendering.Diagrams.Core.clearValue) ::
  forall b_0 v_1 m_2. () =>
    (Graphics.Rendering.Diagrams.Core.AnnDiagram) ->
    (Graphics.Rendering.Diagrams.Core.AnnDiagram)

infixl 9 (Graphics.Rendering.Diagrams.Core.freeze)
(Graphics.Rendering.Diagrams.Core.freeze) ::
  forall v_0 b_1 m_2. ((Data.Monoid.Monoid) (m_2), (Graphics.Rendering.Diagrams.Bounds.OrderedField) (Data.VectorSpace.Scalar), (Graphics.Rendering.Diagrams.Transform.HasLinearMap) (v_0), (Data.VectorSpace.InnerSpace) (v_0)) =>
    (Graphics.Rendering.Diagrams.Core.AnnDiagram) ->
    (Graphics.Rendering.Diagrams.Core.AnnDiagram)

infixl 9 (Graphics.Rendering.Diagrams.Core.mkAD)
(Graphics.Rendering.Diagrams.Core.mkAD) ::
  forall b_0 v_1 m_2. () =>
    (Graphics.Rendering.Diagrams.Core.Prim) ->
    (Graphics.Rendering.Diagrams.Bounds.Bounds) ->
    (Graphics.Rendering.Diagrams.Names.NameMap) ->
    (Graphics.Rendering.Diagrams.Query.Query) ->
    (Graphics.Rendering.Diagrams.Core.AnnDiagram)

infixl 9 (Graphics.Rendering.Diagrams.Core.namePoint)
(Graphics.Rendering.Diagrams.Core.namePoint) ::
  forall v_0 b_1 n_2 m_3. ((Data.Monoid.Monoid) (m_3), (Graphics.Rendering.Diagrams.Bounds.OrderedField) (Data.VectorSpace.Scalar), (Graphics.Rendering.Diagrams.Names.IsName) (n_2), (Graphics.Rendering.Diagrams.Transform.HasLinearMap) (v_0), (Data.VectorSpace.InnerSpace) (v_0)) =>
    (((Graphics.Rendering.Diagrams.Points.Point), (Graphics.Rendering.Diagrams.Bounds.Bounds))) ->
    (n_2) ->
    (Graphics.Rendering.Diagrams.Core.AnnDiagram) ->
    (Graphics.Rendering.Diagrams.Core.AnnDiagram)

infixl 9 (Graphics.Rendering.Diagrams.Core.named)
(Graphics.Rendering.Diagrams.Core.named) ::
  forall v_0 b_1 n_2 m_3. ((Data.Monoid.Monoid) (m_3), (Graphics.Rendering.Diagrams.Bounds.OrderedField) (Data.VectorSpace.Scalar), (Graphics.Rendering.Diagrams.Names.IsName) (n_2), (Graphics.Rendering.Diagrams.Transform.HasLinearMap) (v_0), (Data.VectorSpace.InnerSpace) (v_0)) =>
    (n_2) ->
    (Graphics.Rendering.Diagrams.Core.AnnDiagram) ->
    (Graphics.Rendering.Diagrams.Core.AnnDiagram)

infixl 9 (Graphics.Rendering.Diagrams.Core.names)
(Graphics.Rendering.Diagrams.Core.names) ::
  forall v_0 b_1 m_2. ((GHC.Float.Floating) (Data.VectorSpace.Scalar), (Graphics.Rendering.Diagrams.Transform.HasLinearMap) (v_0), (Data.AdditiveGroup.AdditiveGroup) (Data.VectorSpace.Scalar), (Data.VectorSpace.InnerSpace) (v_0)) =>
    (Graphics.Rendering.Diagrams.Core.AnnDiagram) ->
    (Graphics.Rendering.Diagrams.Names.NameMap)

infixl 9 (Graphics.Rendering.Diagrams.Core.nullPrim)
(Graphics.Rendering.Diagrams.Core.nullPrim) ::
  forall v_0 b_1. ((Data.Monoid.Monoid) (Graphics.Rendering.Diagrams.Core.Render), (Graphics.Rendering.Diagrams.Transform.HasLinearMap) (v_0)) =>
    (Graphics.Rendering.Diagrams.Core.Prim)

infixl 9 (Graphics.Rendering.Diagrams.Core.prims)
(Graphics.Rendering.Diagrams.Core.prims) ::
  forall v_0 m_1 b_2. ((Data.Monoid.Monoid) (m_1), (Graphics.Rendering.Diagrams.Bounds.OrderedField) (Data.VectorSpace.Scalar), (Graphics.Rendering.Diagrams.Transform.HasLinearMap) (v_0), (Data.VectorSpace.InnerSpace) (v_0)) =>
    (Graphics.Rendering.Diagrams.Core.AnnDiagram) ->
    [((Graphics.Rendering.Diagrams.Core.Prim), ((Graphics.Rendering.Diagrams.Monoids.Split), (Graphics.Rendering.Diagrams.Style.Style)))]

infixl 9 (Graphics.Rendering.Diagrams.Core.query)
(Graphics.Rendering.Diagrams.Core.query) ::
  forall v_0 m_1 b_2. ((Data.Monoid.Monoid) (m_1), (Graphics.Rendering.Diagrams.Transform.HasLinearMap) (v_0)) =>
    (Graphics.Rendering.Diagrams.Core.AnnDiagram) ->
    (Graphics.Rendering.Diagrams.Query.Query)

infixl 9 (Graphics.Rendering.Diagrams.Core.resetValue)
(Graphics.Rendering.Diagrams.Core.resetValue) ::
  forall m_0 b_1 v_2. ((Data.Monoid.Monoid) (m_0), (GHC.Classes.Eq) (m_0)) =>
    (Graphics.Rendering.Diagrams.Core.AnnDiagram) ->
    (Graphics.Rendering.Diagrams.Core.AnnDiagram)

infixl 9 (Graphics.Rendering.Diagrams.Core.sample)
(Graphics.Rendering.Diagrams.Core.sample) ::
  forall v_0 m_1 b_2. ((Data.Monoid.Monoid) (m_1), (Graphics.Rendering.Diagrams.Transform.HasLinearMap) (v_0)) =>
    (Graphics.Rendering.Diagrams.Core.AnnDiagram) ->
    (Graphics.Rendering.Diagrams.Points.Point) ->
    (m_1)

infixl 9 (Graphics.Rendering.Diagrams.Core.setBounds)
(Graphics.Rendering.Diagrams.Core.setBounds) ::
  forall b_0 v_1 m_2. ((Data.Monoid.Monoid) (m_2), (Graphics.Rendering.Diagrams.Bounds.OrderedField) (Data.VectorSpace.Scalar), (Graphics.Rendering.Diagrams.Transform.HasLinearMap) (v_1), (Data.VectorSpace.InnerSpace) (v_1)) =>
    (Graphics.Rendering.Diagrams.Bounds.Bounds) ->
    (Graphics.Rendering.Diagrams.Core.AnnDiagram) ->
    (Graphics.Rendering.Diagrams.Core.AnnDiagram)

infixl 9 (Graphics.Rendering.Diagrams.Core.value)
(Graphics.Rendering.Diagrams.Core.value) ::
  forall m_0 b_1 v_2. ((Data.Monoid.Monoid) (m_0)) =>
    (m_0) ->
    (Graphics.Rendering.Diagrams.Core.AnnDiagram) ->
    (Graphics.Rendering.Diagrams.Core.AnnDiagram)

infixl 9 (Graphics.Rendering.Diagrams.Core.withName)
(Graphics.Rendering.Diagrams.Core.withName) ::
  forall n_0 v_1 b_2 m_3. ((GHC.Float.Floating) (Data.VectorSpace.Scalar), (Graphics.Rendering.Diagrams.Names.IsName) (n_0), (Graphics.Rendering.Diagrams.Transform.HasLinearMap) (v_1), (Data.AdditiveGroup.AdditiveGroup) (Data.VectorSpace.Scalar), (Data.VectorSpace.InnerSpace) (v_1)) =>
    (n_0) ->
    ((Graphics.Rendering.Diagrams.Core.AnnDiagram) -> (Graphics.Rendering.Diagrams.Core.AnnDiagram)) ->
    (Graphics.Rendering.Diagrams.Core.AnnDiagram) ->
    (Graphics.Rendering.Diagrams.Core.AnnDiagram)

infixl 9 (Graphics.Rendering.Diagrams.Core.withNameAll)
(Graphics.Rendering.Diagrams.Core.withNameAll) ::
  forall n_0 v_1 b_2 m_3. ((GHC.Float.Floating) (Data.VectorSpace.Scalar), (Graphics.Rendering.Diagrams.Names.IsName) (n_0), (Graphics.Rendering.Diagrams.Transform.HasLinearMap) (v_1), (Data.AdditiveGroup.AdditiveGroup) (Data.VectorSpace.Scalar), (Data.VectorSpace.InnerSpace) (v_1)) =>
    (n_0) ->
    ((Graphics.Rendering.Diagrams.Core.AnnDiagram) -> (Graphics.Rendering.Diagrams.Core.AnnDiagram)) ->
    (Graphics.Rendering.Diagrams.Core.AnnDiagram) ->
    (Graphics.Rendering.Diagrams.Core.AnnDiagram)

infixl 9 (Graphics.Rendering.Diagrams.Core.withNames)
(Graphics.Rendering.Diagrams.Core.withNames) ::
  forall n_0 v_1 b_2 m_3. ((GHC.Float.Floating) (Data.VectorSpace.Scalar), (Graphics.Rendering.Diagrams.Names.IsName) (n_0), (Graphics.Rendering.Diagrams.Transform.HasLinearMap) (v_1), (Data.AdditiveGroup.AdditiveGroup) (Data.VectorSpace.Scalar), (Data.VectorSpace.InnerSpace) (v_1)) =>
    [(n_0)] ->
    ((Graphics.Rendering.Diagrams.Core.AnnDiagram) -> (Graphics.Rendering.Diagrams.Core.AnnDiagram)) ->
    (Graphics.Rendering.Diagrams.Core.AnnDiagram) ->
    (Graphics.Rendering.Diagrams.Core.AnnDiagram)

infixl 9 (Graphics.Rendering.Diagrams.HasOrigin.moveOriginBy)
(Graphics.Rendering.Diagrams.HasOrigin.moveOriginBy) ::
  forall t_0. ((Graphics.Rendering.Diagrams.HasOrigin.HasOrigin) (t_0)) =>
    (Graphics.Rendering.Diagrams.V.V) ->
    (t_0) ->
    (t_0)

infixl 9 (Graphics.Rendering.Diagrams.HasOrigin.moveTo)
(Graphics.Rendering.Diagrams.HasOrigin.moveTo) ::
  forall t_0. ((Graphics.Rendering.Diagrams.HasOrigin.HasOrigin) (t_0)) =>
    (Graphics.Rendering.Diagrams.Points.Point) ->
    (t_0) ->
    (t_0)

infixl 9 (Graphics.Rendering.Diagrams.HasOrigin.place)
(Graphics.Rendering.Diagrams.HasOrigin.place) ::
  forall t_0. ((Graphics.Rendering.Diagrams.HasOrigin.HasOrigin) (t_0)) =>
    (t_0) ->
    (Graphics.Rendering.Diagrams.Points.Point) ->
    (t_0)

infixr 5 (Graphics.Rendering.Diagrams.Names..>)
(Graphics.Rendering.Diagrams.Names..>) ::
  forall a1_0 a2_1. ((Graphics.Rendering.Diagrams.Names.IsName) (a1_0), (Graphics.Rendering.Diagrams.Names.IsName) (a2_1)) =>
    (a1_0) ->
    (a2_1) ->
    (Graphics.Rendering.Diagrams.Names.Name)

infixl 9 (Graphics.Rendering.Diagrams.Names.fromNames)
(Graphics.Rendering.Diagrams.Names.fromNames) ::
  forall v_0 a_1. ((Graphics.Rendering.Diagrams.Names.IsName) (a_1), (GHC.Classes.Ord) (Data.VectorSpace.Scalar), (Data.AdditiveGroup.AdditiveGroup) (Data.VectorSpace.Scalar)) =>
    [((a_1), (Graphics.Rendering.Diagrams.Points.Point))] ->
    (Graphics.Rendering.Diagrams.Names.NameMap)

infixl 9 (Graphics.Rendering.Diagrams.Names.fromNamesB)
(Graphics.Rendering.Diagrams.Names.fromNamesB) ::
  forall a_0 v_1. ((Graphics.Rendering.Diagrams.Names.IsName) (a_0)) =>
    [((a_0), ((Graphics.Rendering.Diagrams.Points.Point), (Graphics.Rendering.Diagrams.Bounds.Bounds)))] ->
    (Graphics.Rendering.Diagrams.Names.NameMap)

infixl 9 (Graphics.Rendering.Diagrams.Names.lookupN)
(Graphics.Rendering.Diagrams.Names.lookupN) ::
  forall n_0 v_1. ((Graphics.Rendering.Diagrams.Names.IsName) (n_0)) =>
    (n_0) ->
    (Graphics.Rendering.Diagrams.Names.NameMap) ->
    (Data.Maybe.Maybe)

infixl 9 (Graphics.Rendering.Diagrams.Names.rememberAs)
(Graphics.Rendering.Diagrams.Names.rememberAs) ::
  forall a_0 v_1. ((Graphics.Rendering.Diagrams.Names.IsName) (a_0)) =>
    (a_0) ->
    (Graphics.Rendering.Diagrams.Points.Point) ->
    (Graphics.Rendering.Diagrams.Bounds.Bounds) ->
    (Graphics.Rendering.Diagrams.Names.NameMap) ->
    (Graphics.Rendering.Diagrams.Names.NameMap)

infixl 9 (Graphics.Rendering.Diagrams.Points.*.)
(Graphics.Rendering.Diagrams.Points.*.) ::
  forall v_0. ((Data.VectorSpace.VectorSpace) (v_0)) =>
    (Data.VectorSpace.Scalar) ->
    (Graphics.Rendering.Diagrams.Points.Point) ->
    (Graphics.Rendering.Diagrams.Points.Point)

infixl 9 (Graphics.Rendering.Diagrams.Points.origin)
(Graphics.Rendering.Diagrams.Points.origin) ::
  forall v_0. ((Data.AdditiveGroup.AdditiveGroup) (v_0)) =>
    (Graphics.Rendering.Diagrams.Points.Point)

infixl 9 (Graphics.Rendering.Diagrams.Query.runQuery)
(Graphics.Rendering.Diagrams.Query.runQuery) ::
  forall v_0 m_1. () =>
    (Graphics.Rendering.Diagrams.Query.Query) ->
    (Graphics.Rendering.Diagrams.Points.Point) ->
    (m_1)

infixl 9 (Graphics.Rendering.Diagrams.Style.applyAttr)
(Graphics.Rendering.Diagrams.Style.applyAttr) ::
  forall a_0 d_1. ((Graphics.Rendering.Diagrams.Style.AttributeClass) (a_0), (Graphics.Rendering.Diagrams.Style.HasStyle) (d_1)) =>
    (a_0) ->
    (d_1) ->
    (d_1)

infixl 9 (Graphics.Rendering.Diagrams.Style.applyTAttr)
(Graphics.Rendering.Diagrams.Style.applyTAttr) ::
  forall a_0 d_1. ((Graphics.Rendering.Diagrams.Style.AttributeClass) (a_0), (Graphics.Rendering.Diagrams.Style.HasStyle) (d_1), (Graphics.Rendering.Diagrams.Transform.Transformable) (a_0), (Graphics.Rendering.Diagrams.V.V)  ~  (Graphics.Rendering.Diagrams.V.V)) =>
    (a_0) ->
    (d_1) ->
    (d_1)

infixl 9 (Graphics.Rendering.Diagrams.Style.combineAttr)
(Graphics.Rendering.Diagrams.Style.combineAttr) ::
  forall a_0 v_1. ((Graphics.Rendering.Diagrams.Style.AttributeClass) (a_0)) =>
    (a_0) ->
    (Graphics.Rendering.Diagrams.Style.Style) ->
    (Graphics.Rendering.Diagrams.Style.Style)

infixl 9 (Graphics.Rendering.Diagrams.Style.getAttr)
(Graphics.Rendering.Diagrams.Style.getAttr) ::
  forall a_0 v_1. ((Graphics.Rendering.Diagrams.Style.AttributeClass) (a_0)) =>
    (Graphics.Rendering.Diagrams.Style.Style) ->
    (Data.Maybe.Maybe)

infixl 9 (Graphics.Rendering.Diagrams.Style.mkAttr)
(Graphics.Rendering.Diagrams.Style.mkAttr) ::
  forall a_0 v_1. ((Graphics.Rendering.Diagrams.Style.AttributeClass) (a_0)) =>
    (a_0) ->
    (Graphics.Rendering.Diagrams.Style.Attribute)

infixl 9 (Graphics.Rendering.Diagrams.Style.mkTAttr)
(Graphics.Rendering.Diagrams.Style.mkTAttr) ::
  forall a_0 v_1. ((Graphics.Rendering.Diagrams.Style.AttributeClass) (a_0), (Graphics.Rendering.Diagrams.Transform.Transformable) (a_0), (Graphics.Rendering.Diagrams.V.V)  ~  (v_1)) =>
    (a_0) ->
    (Graphics.Rendering.Diagrams.Style.Attribute)

infixl 9 (Graphics.Rendering.Diagrams.Style.unwrapAttr)
(Graphics.Rendering.Diagrams.Style.unwrapAttr) ::
  forall a_0 v_1. ((Graphics.Rendering.Diagrams.Style.AttributeClass) (a_0)) =>
    (Graphics.Rendering.Diagrams.Style.Attribute) ->
    (Data.Maybe.Maybe)

infixl 9 (Graphics.Rendering.Diagrams.Transform.<->)
(Graphics.Rendering.Diagrams.Transform.<->) ::
  forall u_0 v_1. ((Graphics.Rendering.Diagrams.Transform.HasLinearMap) (u_0), (Graphics.Rendering.Diagrams.Transform.HasLinearMap) (v_1)) =>
    ((v_1)) ->
    ((u_0)) ->
    (Graphics.Rendering.Diagrams.Transform.:-:)

infixl 9 (Graphics.Rendering.Diagrams.Transform.apply)
(Graphics.Rendering.Diagrams.Transform.apply) ::
  forall v_0. ((Graphics.Rendering.Diagrams.Transform.HasLinearMap) (v_0)) =>
    (Graphics.Rendering.Diagrams.Transform.Transformation) ->
    (v_0) ->
    (v_0)

infixl 9 (Graphics.Rendering.Diagrams.Transform.fromLinear)
(Graphics.Rendering.Diagrams.Transform.fromLinear) ::
  forall v_0. ((Data.AdditiveGroup.AdditiveGroup) (v_0)) =>
    (Graphics.Rendering.Diagrams.Transform.:-:) ->
    (Graphics.Rendering.Diagrams.Transform.:-:) ->
    (Graphics.Rendering.Diagrams.Transform.Transformation)

infixl 9 (Graphics.Rendering.Diagrams.Transform.inv)
(Graphics.Rendering.Diagrams.Transform.inv) ::
  forall v_0. ((Graphics.Rendering.Diagrams.Transform.HasLinearMap) (v_0)) =>
    (Graphics.Rendering.Diagrams.Transform.Transformation) ->
    (Graphics.Rendering.Diagrams.Transform.Transformation)

infixl 9 (Graphics.Rendering.Diagrams.Transform.lapp)
(Graphics.Rendering.Diagrams.Transform.lapp) ::
  forall v_0 u_1. ((Graphics.Rendering.Diagrams.Transform.HasLinearMap) (u_1), (Data.VectorSpace.VectorSpace) (v_0), (Data.VectorSpace.Scalar)  ~  (Data.VectorSpace.Scalar)) =>
    (Graphics.Rendering.Diagrams.Transform.:-:) ->
    (u_1) ->
    (v_0)

infixl 9 (Graphics.Rendering.Diagrams.Transform.linv)
(Graphics.Rendering.Diagrams.Transform.linv) ::
  forall u_0 v_1. () =>
    (Graphics.Rendering.Diagrams.Transform.:-:) ->
    (Graphics.Rendering.Diagrams.Transform.:-:)

infixl 9 (Graphics.Rendering.Diagrams.Transform.papply)
(Graphics.Rendering.Diagrams.Transform.papply) ::
  forall v_0. ((Graphics.Rendering.Diagrams.Transform.HasLinearMap) (v_0)) =>
    (Graphics.Rendering.Diagrams.Transform.Transformation) ->
    (Graphics.Rendering.Diagrams.Points.Point) ->
    (Graphics.Rendering.Diagrams.Points.Point)

infixl 9 (Graphics.Rendering.Diagrams.Transform.scale)
(Graphics.Rendering.Diagrams.Transform.scale) ::
  forall t_0. ((GHC.Real.Fractional) (Data.VectorSpace.Scalar), (Graphics.Rendering.Diagrams.Transform.Transformable) (t_0), (GHC.Classes.Eq) (Data.VectorSpace.Scalar)) =>
    (Data.VectorSpace.Scalar) ->
    (t_0) ->
    (t_0)

infixl 9 (Graphics.Rendering.Diagrams.Transform.scaling)
(Graphics.Rendering.Diagrams.Transform.scaling) ::
  forall v_0. ((GHC.Real.Fractional) (Data.VectorSpace.Scalar), (Graphics.Rendering.Diagrams.Transform.HasLinearMap) (v_0)) =>
    (Data.VectorSpace.Scalar) ->
    (Graphics.Rendering.Diagrams.Transform.Transformation)

infixl 9 (Graphics.Rendering.Diagrams.Transform.transl)
(Graphics.Rendering.Diagrams.Transform.transl) ::
  forall v_0. () =>
    (Graphics.Rendering.Diagrams.Transform.Transformation) ->
    (v_0)

infixl 9 (Graphics.Rendering.Diagrams.Transform.translate)
(Graphics.Rendering.Diagrams.Transform.translate) ::
  forall t_0. ((Graphics.Rendering.Diagrams.Transform.HasLinearMap) (Graphics.Rendering.Diagrams.V.V), (Graphics.Rendering.Diagrams.Transform.Transformable) (t_0)) =>
    (Graphics.Rendering.Diagrams.V.V) ->
    (t_0) ->
    (t_0)

infixl 9 (Graphics.Rendering.Diagrams.Transform.translation)
(Graphics.Rendering.Diagrams.Transform.translation) ::
  forall v_0. ((Graphics.Rendering.Diagrams.Transform.HasLinearMap) (v_0)) =>
    (v_0) ->
    (Graphics.Rendering.Diagrams.Transform.Transformation)

infixl 9 (Graphics.Rendering.Diagrams.Transform.transp)
(Graphics.Rendering.Diagrams.Transform.transp) ::
  forall v_0. () =>
    (Graphics.Rendering.Diagrams.Transform.Transformation) ->
    (Graphics.Rendering.Diagrams.Transform.:-:)

infixl 9 (Graphics.Rendering.Diagrams.Transform.unTransInv)
(Graphics.Rendering.Diagrams.Transform.unTransInv) ::
  forall t_0. () =>
    (Graphics.Rendering.Diagrams.Transform.TransInv) ->
    (t_0)

infixl 9 (Graphics.Rendering.Diagrams.Util.withLength)
(Graphics.Rendering.Diagrams.Util.withLength) ::
  forall v_0. ((GHC.Float.Floating) (Data.VectorSpace.Scalar), (Data.VectorSpace.InnerSpace) (v_0)) =>
    (Data.VectorSpace.Scalar) ->
    (v_0) ->
    (v_0)

